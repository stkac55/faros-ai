# Default values for aionworker.
global:
  faros:
    nodeJs:
      GCLoggingEnabled: false
  datadog:
    url: "https://api.datadoghq.com" # See https://docs.datadoghq.com/getting_started/site/#access-the-datadog-site
    agent:
      otelGrpcPort: "4317"
  postgresql:
    service:
      ports:
        postgresql: "5432"
  temporal:
    tls: "true"
    host: "NOT_DEFINED"
    port: "7233"

DDServiceName: "aion-worker"
releaseBucket: "s3://faros-ai-aion-releases"
releaseRegistry: "/aion/releases"
releaseVersionFile: "RELEASE"
registerLatestRelease: "true"
reportsAllowList: ""
logLevel: "info"

efs:
  aion:
    volumeSize: "5Gi"
    volumeHandle: "NOT_DEFINED"
  metabase:
    volumeSize: "5Gi"
    volumeHandle: "NOT_DEFINED"

replicaCount: 1

image:
  repository: farosai/aion-worker
  pullPolicy: IfNotPresent
  tag: "874521afef64d5e1e3366d7fdea6e947db0a01fd"

imagePullSecrets:
- name: dockerhub
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 8080
  targetPort: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
  - host: aion.local
    paths:
    - path: /
      pathType: ImplementationSpecific
  tls: []

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
